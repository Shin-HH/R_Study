chisq.test(obs, p = p)
# lack of fit test(적합도 검정)
obs <- c(54, 50, 110, 88, 8)
p <- c(0.2, 0.1, 0.3, 0.3, 0.1)
chisq.test(obs, p = p)
# lack of fit test(적합도 검정)
obs <- c(54, 40, 110, 88, 8)
p <- c(0.2, 0.1, 0.3, 0.3, 0.1)
chisq.test(obs, p = p)
# procedure
exp <- obs * p
exp
# procedure
remove(exp)
# procedure
n <- sum(obs)
exp <- obs * p
exp <- n * p
chi <- sum((obs - exp) ** 2 / exp)
r1 <- c(3, 2, 5)
r2 <- c(26, 10, 4)
r3 <- c(5, 20, 5)
mat <- rbind(r1, r2, r3)
chisq.test(mat)
r1 <- c(200, 100)
r2 <- c(50, 50)
mat <- rbind(r1, r2)
chisq.test(mat)
r1 <- c(110, 70, 40)
r2 <- c(140, 30, 10)\
r2 <- c(140, 30, 10)
mat <- rbind(r1, r2)
chisq.test(mat)
chisq.test(r1, r2, correct = FALSE)
r1 <- c(85, 15)
r2 <- c(60, 40)
mat <- rbind(r1, r2)
chisq.test(r1, r2, correct = FALSE)
chisq.test(mat correct = FALSE)
chisq.test(mat, correct = FALSE)
r1 <- c(200, 100)
r2 <- c(50, 50)
mat <- rbind(r1, r2)
chisq.test(mat)
chisq.test(mat, correct = FALSE)
chisq.test(mat)
chisq.test(mat, correct = FALSE)
r1 <- c(10, 15, 5)
r1 <- c(10, 15, 5)
r2 <- c(40, 35, 45)
mat <- rbind(r1, r2)
chisq.test(mat)
r1 <- c(15, 4, 1)
r2 <- c(10, 8, 2)
mat <- rbind(r1, r2)
chisq.test(mat)
r1 = c(10, 6, 45, 49)
r2 = c(8, 10, 32, 50)
mat = rbind(r1, r2)
chisq.test(mat)
r1 = c(10, 6, 45, 39)
r2 = c(8, 10, 32, 50)
mat = rbind(r1, r2)
chisq.test(mat)
obs <- c(30, 28, 32, 24, 33, 33)
p <- c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6)
chisq.test(obs, p = p)
r1 <- c(22, 17, 7)
r2 <- c(9, 15, 20)
mat <- rbind(r1, r2)
chisq.test(mat)
ad <- c(4, 8, 9, 8, 8, 12 , 6, 10, 6)
sale <- c(9, 20, 22, 15, 17, 30, 18, 25, 10)
scatter(ad, sale)
plot(ad. sale)
plot(ad, sale)
plot(formula = sale ~ ad)
mat <- cbind(ad, sale)
mat
cor(mat)
lm(sale~ad)
summary(lm(sale ~ ad))
35 / 14.58
rstudio <- vector(1, 2, 3)
c(1, 2, 3)
a <- c(1, 2, 3)
b <- c(2, 3, 45)
a + b
a * b
dot(a, b)
a <- c(1, 2, 3, 4, 5, 6,)
a <- c(1, 2, 3, 4, 5, 6)
rm(a)
# 현재 작업디렉토리 확인
getwd()
print('a')
###############################################
# vector
# 1. homoge
A <- c(1, 2, 3)
B <- c(1, 'a', 0.5)
# mode
mode(A)
mode(B)
# 2. vector has an index for each element
# indexing by []
# index starts 1(in contrast python starts 0)
A[1]
###############################################
# vector
# 1. homogeneous: all values must be same datatype
A <- c(10, 20, 30)
B <- c(1, 'a', 0.5)
# mode(type in python)
mode(A)
mode(B) # all values become character
# 2. vector has an index for each element
# indexing by []
# index starts 1(in contrast python starts 0)
A[1]
A[2]
# slicing by [:]
A[1:2]
A[1:]
A[1:3]
A[:3]
A[c(2, 3)]
# assign names
names(A)
names(A) <- c('First', 'Second', 'Third')
A
# indexing by name is available if vector has name
A['First']
A['First':'Second']
A[c('First', 'Third')]
x <- c(1, 2, 3, 4)
x
x <- c(x[1:3], 10, x[4])
x
length(x)
# length(): return vector's length(len in python)
length(x)
# column first: column will be filled first if vector convert into other datatype
x <- matrix(1:6, nrows = 3, ncols = 2)
# column first: column will be filled first if vector convert into other datatype
x <- matrix(1:6, nrow = 3, ncol = 2)
x
1:6
mode(1:6)
type(1:6)
x + c(1:2)
x + y
# vector operatations are elenment-wise
x <- c(1, 2, 3)
y <- c(10, 20, 30)
x + y
x * y
x % y
x %% y
x // y
x / y
y <- c(10, 20, 30, 40, 50)
y[c(1:3)]
y[2;3]
y[2:3]
y[idx]
idx <- c(3, 4)
y[idx]
y[1, 2, 1, 3]
y[c(1, 2, 1, 3)]
y[-3]
y[-3] # caution) exclude index -3 and all
y[-length(y)]
# define vectors
x <- 1:5
x
y <- 5:1
y
z <- 10
1:z-1
1:(z-1)
# seq(): (range in python)
seq(from = 12, to = 30, by = 1)
seq(from = 12, to = 30, by = 3)
seq(from = 1.1, to = 2, length = 10)
# rep(): repeat
rep(10, 5)
rep(c(10, 20, 30), 3)
rep(1:3, 3)
rep(c(10, 20, 30), each = 3)
# comparison operator
x <- 1:10
x > 8
any(x > 8)
any(x > 20)
all(x > 8)
all(x > 0)
# NA(Not Available): some value exists but we cannot exactly know the value
# NULL: physically not exist
x <- c(1, 2, NA, 4, 5)
y <- c(1, 2, NULL, 4, 5)
x
y
mean(x)
mean(y)
mean(x, na.rm = TRUE)
# filtering
x <- c(10, 20, NA, 40, 50)
x[x>20]
subset(x, x>20)
which(x > 20)
listA <- list(1, 2, 'a')
listA
listA[[1]]
listA[1]
listA[[1]] # list's indexing should be used by [[]]
listA[c(1, 2)]
listA[[c(1, 2)]]
# list's elements can have names
names(listA)
naems(listA) <- c('First', 'Second', 'Third')
names(listA) <- c('First', 'Second', 'Third')
listA
listA[['First']]
listA$First
# handling
A <- list(name = 'Shin', age = 24, union =TRUE)
A
A$name
A$age
A$union
B <- list('Shin', 24, T)
B
B$1
B[[1]]
C <- vector(mode = 'list')
C[['name']] <- 'Shin'
C[['age']] <- 24
C[['union']] <- T
C
C$name
C$age
C$union
# difference between [] and [[]]
C1 <- C[[1]]
class(C1)
# difference between [] and [[]]
C1 <- C[1]
class(C1)
class(C2)
C2 <- C[[1]]
class(C2)
# Update
C
C$sex <- 'male'
C
# delete
C$age <- NULL
C
# list in list
tmplist <- list(a = list(1:5, c('a', 'b', 'c')), b = '2', c = NA)
tmplsit
tmplist
# unlist(): return in vector form
unlist(tmplist)
unlist(tmplist, use.names = F)
A <- lsit(1:3, 25:29)
A <- list(1:3, 25:29)
A
lapply(A.median)
lapply(A, median)
sapply(A, median)
x
x
# get current working directory
getwd()
# 디렉토리 변경
setwd('/Users/sinhyeonho/신현호/R/basic_R')
getwd()
# 상위 디렉토리로 변경
setwd('..')
getwd()
# 하위 디렉토리로 변경
setwd('basic_R')
getwd()
q()
# 변수 조회
ls()
rm(x)
rm(list = ls())
# 변수 조회
x <- 10
ls()
# 변수 조회
ls()
rm(x)
# 변수 조회
ls()
x <- 10
ls()
ls()
y <- c(1, 2, 3, 4)
ls()
f <- function(y) (y - 32)/1.8
ls()
s <- 'hello, R'
ls()
#
ls.str()
# 변수 삭제
pie <- 3.141592
pie
rm(pie)
pie
# 변수 삭제
z <- 3.141592
z
rm(z)
z
# 여러 변수 삭제
rm(x, y)
ls()
# 모든 변수 삭제
rm(list = ls())
ls()
#
history()
# 스칼라
a <- 3
a
mode(a)
b <- c(1, 2, 3)
b
mode(b)
# 1. 숫자형
# 1.1 정수
a <- 1
print(a)
# 1.2 소수
b <- 1.1
c
c <- a + b
c
# 2. NA
# 데이터에 값이 존재하지 않으면 NA
a <- 10
b <- 20
c <- 30
d <- NA
print(a, b, c, d)
print(a, b, c)
d
print(d)
is.na(d)
# 3. NULL
# 초기화되지 않은 값을 의미
# NA와는 다른 개념이다! TODO 차이점 정리
x <- NULL
is.null(x)
is.null(NA)
# 4. 문자열
# ''또는 ""로 묶어서 사용
a <- 'hello, R'
b <- "hello, R"
a
b
# 5. 진리값
# TRUE(T), FALSE(F)
# AND(&), OR(|), !(NOT) 연산자 사용가능
TRUE & TRUE
TRUE & FALSE
TRUE | TRUE
TRUE | FALSE
!TRUE
!FALSE
# &&연산자와 ||연산자
# boolean이 들어있는 벡터끼리 연산시 차이점
# &, |: 각 원소간 연산을 수행
c(T, F) & c(T, T)
c(T, F) | c(T, T)
# &&, ||: 한개의 boolean값끼리 연산을 수행
T && T
c(T, F) && c(F, F)
c(T, F) && c(T, T)
# 6. 요인(Factor)
# 범주형(Categorical) 변수를 위한 데이터 타입
sex <- factor('m', c('m', 'f'))
sex
# nlevels(factor): 범주의 수를 반환
nlevels(sex)
# levels(factor): 범주의 목록을 반환
levels(sex)
# levels에 값을 할당해서 level을 변경할 수 있음
levels(sex) <- c('male', 'female')
sex
grade
# factor는 명목형 변수(Nominal)를 만듬
# 순서형 변수(Ordinal)로 만들기 위한 방법
# ordered()
# factor(c(), ordered = T)
grade <- factor('A', c('A', 'B', 'C', 'F'), ordered = T)
grade
grade <- factor('B', ordered(c('A', 'B', 'C', 'F')))
grade
grade <- ordered(factor('B', c('A', 'B', 'C', 'F')))
grade
# factor는 명목형 변수(Nominal)를 만듬
# 순서형 변수(Ordinal)로 만들기 위한 방법
# ordered()
# factor(c(), ordered = T)
grade <- factor('A', c('A', 'B', 'C', 'F'), ordered = T)
grade
grade <- ordered(factor('B', c('A', 'B', 'C', 'F')))
grade
